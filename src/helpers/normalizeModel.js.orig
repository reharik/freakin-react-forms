import uuid from 'uuid';

<<<<<<< HEAD
const normalizeModel = (props, data, events)=>{
  var formName = props.formName || uuid.v4();
  return props.model && props.model.map((x, i) => {
    //validate required props
    let clone = Object.assign({}, x);
    clone.label = propToLabel(x.label || x.name);
    clone.placeholder = propToLabel(x.placeholder) || propToLabel(x.label || x.name);
    clone.rules = x.rules || [];
    clone.value = data[x.name] || '';
    clone.onChange = events.onChangeHandler;
    clone.onBlur = events.onBlurHandler;
    clone.errors = [];
    clone.invalid = false;
    clone.key = formName + '_' + i;
    return clone;
  })
};

const propToLabel = function(val) {
=======
export function propToLabel(val) {
>>>>>>> f6e336ff7fec10296125f2de3b93ea16342607a0
  return val ? val.replace(/([A-Z])/g, ' $1')
  // uppercase the first character
    .replace(/^./, str => str.toUpperCase())
    : val;
}

const normalizeModel = (props, events) => {
  let formName = props.formName || uuid.v4();
  const model = props.model;
  const modelArray = model && Object.keys(model).map((x, i) => {
      //validate required props
    const item = model[x];
    let clone = Object.assign({}, item);
    clone.label = propToLabel(item.label || item.name);
    clone.placeholder = propToLabel(item.placeholder) || propToLabel(item.label || item.name);
    clone.rules = item.rules || [];
    clone.value = item.value || '';
    clone.originalValue = item.value || '';
    clone.onChange = events.onChangeHandler;
    clone.onBlur = events.onBlurHandler;
    clone.errors = [];
    clone.invalid = false;
    clone.key = formName + '_' + i;
    return clone;
  });
  return modelArray.reduce((prev, next) => { prev[next.name] = next; return prev;}, {});

};


export default normalizeModel;
